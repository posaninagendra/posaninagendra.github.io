<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nagendra Posani</title>
    <link>https://posaninagendra.github.io/</link>
    <description>Recent content on Nagendra Posani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 18 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://posaninagendra.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The AAs of security, Authentication &amp; Authorization</title>
      <link>https://posaninagendra.github.io/post/2017-07-18-modern-authentication/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/post/2017-07-18-modern-authentication/</guid>
      <description>Authentication and Authorization are the two fundamentals of security that we are dealing today. With rapid increase of the usage of computers, cell phones and other smart devices like tablets, smart watches and other IoT devices, applications authenticating its users on various devices has become a crucial problem. Also, now-a-days many companies are coming up with multiple related yet independent software products and authenticating their users on each of these applications and granting authorization access to the resources has become a challenging problem.</description>
    </item>
    
    <item>
      <title>Core Data Explained</title>
      <link>https://posaninagendra.github.io/post/2017-06-19-core-data/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/post/2017-06-19-core-data/</guid>
      <description>Core data is one of the most misunderstood frameworks in iOS. If one understands the individual components of the framework and its usage, it is one of the easy to use frameworks. Lets go through the individual components to get an overview of this framework and see its usage through swift code snippets and throw away the frustration.
Core data framework is a model layer and persistent technology. It helps you build the model layer that represents the state of your application and perform store and retrieve operations of data through objects persistently.</description>
    </item>
    
    <item>
      <title>Web Views in iOS</title>
      <link>https://posaninagendra.github.io/post/2017-06-02-wkwebview-uiwebview/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/post/2017-06-02-wkwebview-uiwebview/</guid>
      <description>The two different class of web views that are supported in iOS are WKWebView and UIWebView. There are obvious fundamental differences between these two classes that eases the decision-making process.
In WWDC 2014, Apple introduced WebKit with a brand new WKWebView as a better version of the existing web view (i.e. UIWebView) in the UIKit. It is well known that UIWebView suffers from some major issues like the memory leak, and can throttle the application that heavily dependent on web views.</description>
    </item>
    
    <item>
      <title>A Story of Swift</title>
      <link>https://posaninagendra.github.io/post/2017-03-22-a-story-of-swift/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/post/2017-03-22-a-story-of-swift/</guid>
      <description>I started my career as Software Developer at Kuliza in January 2015, within few weeks of my joining, I was asked to join the iOS development team. I was too excited to learn something new, a new technology, a new language. With my background and liking towards Python, I was expecting a new language to be much more fun to learn and I ended up in learning 30+ years old language with boring syntax.</description>
    </item>
    
    <item>
      <title>Elastic Search Client Library</title>
      <link>https://posaninagendra.github.io/post/2017-03-22-elastic-search/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/post/2017-03-22-elastic-search/</guid>
      <description>When I first heard of Elastic Search from my friend, I imagined it to be an easily scalable search engine from the word elastic. I was fascinated by hearing great features of this smart engine. Here is a little trivia about this amazing technology. Elastic Search is an open source distributed, RESTful search engine, developed by Shay Banon. It is a multi-tenant system, reliable and scalable.
We all use Google for searching, when we do a search query we get the results a few fraction of seconds, ever wondered what goes behind the scenes to implement such a robust and efficient system?</description>
    </item>
    
    <item>
      <title>iOS Development</title>
      <link>https://posaninagendra.github.io/post/2017-03-20-ios-projects/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/post/2017-03-20-ios-projects/</guid>
      <description>I served as iOS Developer at Kuliza Technologies, in Bangalore for 1.7 years. During this period I worked on various projects and repeatedly recognized for my performance in developing complex mobile applications for multimillion-dollar clients. I am responsible for full lifecycle development of iOS mobile applications, from initial requirement gathering to architecture design, coding, dev-testing, and shipping it to App Store. I have developed about 12 iPhone and 2 Apple Watch applications to various clients, which are deployed on App Store, few of them got more than a million downloads.</description>
    </item>
    
    <item>
      <title>Multicasting in Delay Tolerant Networks</title>
      <link>https://posaninagendra.github.io/post/2016-12-12-multicasting-in-dtn/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/post/2016-12-12-multicasting-in-dtn/</guid>
      <description>Delay tolerant networks are named so since the connections between nodes are intermittent and hence lack instantaneous end-to-end sender-to-receiver paths. This is particularly applicable to systems that suffer disruption in infrastructure leading to huge delays in message delivery. There can be many real-life applications of delay tolerant networking like emergency response, military systems, vehicular systems and deep-space communication.
In such scenarios, there is no network infrastructure to establish an end-to-end communication path between two nodes.</description>
    </item>
    
    <item>
      <title>iOS App Certificates and Distribution</title>
      <link>https://posaninagendra.github.io/post/2016-06-14-ios-certificates-distribution/</link>
      <pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/post/2016-06-14-ios-certificates-distribution/</guid>
      <description>Well, it is not a rocket science to create certificates and distribute the app to the testers/users, but if you are doing it for the first time you may have to google about the process. Often the developers get frustrated with Apple’s security scheme to distribute the app, but trust me that’s the prime reason why Apple’s App Store has many trusted apps over Android’s Play Store. Though there are many Stack Overflow links out there which helps you to finish this setup but I want to summarize and give a brief idea of everything related to the process of creating certificates, generating builds and uploading it to the App Store.</description>
    </item>
    
    <item>
      <title>Alphanumeric Shellcode Generators</title>
      <link>https://posaninagendra.github.io/post/2014-12-28-alphanumeric-shellcode-generator/</link>
      <pubDate>Sun, 28 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/post/2014-12-28-alphanumeric-shellcode-generator/</guid>
      <description>A common and important class of attack on computer systems is the code injection attack. This attack has two phases: a) injection of code (a.k.a. the shellcode), and b) execution of the injected code. Typically, code is injected in placeholders for data. So, while the target program expects data, the attacker instead sends code (disguised as data). The attacker then redirects the program execution to the injected code. To do this, the attacker can exploit program vulnerabilities such as buffer overflows.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://posaninagendra.github.io/page/projects/</link>
      <pubDate>Wed, 02 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/page/projects/</guid>
      <description>Now a days everyone wants to learn to code and slowly it has become an indispensable skill. According to me, learning new languages isn&amp;rsquo;t enough, we have to be comfortable with the technologies and be able to work with it. The rapid evolution of technology forces us to constantly reconsider which skills are in demand. Learning new technologies or being up to date with what we already know is very important.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://posaninagendra.github.io/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://posaninagendra.github.io/license/</guid>
      <description>Released under MIT License Copyright &amp;copy; 2013 Mark Otto.
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
  </channel>
</rss>